
namespace actor_stats {
    function add_points_str(string, string, string)
    function get_points(string)
    function add_points(string, string, number, number)
}

--// Rezy
namespace weather {
    function pause(boolean)
	function is_paused()
    function set_value_string(string, string)
	function get_value_string(string)
	function set_value_numric(string, number)
	function get_value_numric(string)
	function set_value_vector(string, number, number, number, number)
	function get_value_vector(string)
	function boost_value(string, number)
	function boost_reset()
	function reload()
}

namespace hud_adjust {
    function enabled(boolean)
    function set_value(string, number)
	function set_vector(number, number, number, number, number)
	function remove_hud_model(string)
}

namespace debug {
	function traceback(string, number)
	function getinfo(number, string)
}
	

class entity_memory_object : memory_object {
    property last_level_time
    property level_time
    property object_info
    property self_info
	
    function object(const entity_memory_object&)
}

class game_memory_object : memory_object {
    property last_level_time
    property level_time
    property object_info
    property self_info
	
    function object(const game_memory_object&)
}

class flags16 {
    flags16 ()
	
    function zero()
    function assign(const flags16&)
    function assign(number)
    function is(flags16*, number)
    function and(number)
    function and(const flags16&, number)
    function equal(flags16*, const flags16&)
    function equal(flags16*, const flags16&, number)
    function test(flags16*, number)
    function is_any(flags16*, number)
    function or(number)
    function or(const flags16&, number)
    function one(flags16*)
    function set(flags16*, number, boolean)
    function invert()
    function invert(const flags16&)
    function invert(number)
    function get() const
}

class flags32 {
    flags32 ()
	
    function zero()
    function assign(const flags32&)
    function assign(number)
    function is(flags32*, number)
    function and(number)
    function and(const flags32&, number)
    function equal(flags32*, const flags32&)
    function equal(flags32*, const flags32&, number)
    function test(flags32*, number)
    function is_any(flags32*, number)
    function or(number)
    function or(const flags32&, number)
    function one()
    function set(flags32*, number, boolean)
    function invert()
    function invert(const flags32&)
    function invert(number)
    function get() const
}

class matrix {
    property _14_
    property _24_
    property _34_
    property _44_
    property c
    property i
    property j
    property k
	
    matrix ()
	
    function mk_xform(const struct _quaternion<number>&, const vector&)
    function set(const matrix&)
    function set(const vector&, const vector&, const vector&, const vector&)
    function div(const matrix&, number)
    function div(number)
    function identity()
    function setHPB(number, number, number)
    function setXYZ(number, number, number)
    function getHPB(matrix*, number*, number*, number*)
    function mul(const matrix&, const matrix&)
    function mul(const matrix&, number)
    function mul(number)
    function setXYZi(number, number, number)
}

class Frect {
    property lt
    property rb
    property x1
    property x2
    property y1
    property y2
	
    Frect ()
	
    function set(number, number, number, number)
}


class spawn_story_ids {
    const INVALID_SPAWN_STORY_ID = -1
}

class story_ids {
    const INVALID_STORY_ID = -1
    const Invalid = 65535
    const test_01 = 65000
    const test_02 = 65001
    const test_03 = 65002
    const test_04 = 65003
    const test_05 = 65004
}

class callback {
    const action_animation = 21
    const action_movement = 18
    const action_object = 24
    const action_particle = 23
    const action_removed = 20
    const action_sound = 22
    const action_watch = 19
    const actor_sleep = 25
    const article_info = 12
    const death = 8
    const helicopter_on_hit = 27
    const helicopter_on_point = 26
    const hit = 16
    const inventory_info = 11
    const inventory_pda = 10
    const level_border_enter = 7
    const level_border_exit = 6
    const map_location_added = 14
    const on_item_drop = 29
    const on_item_take = 28
    const patrol_path_in_point = 9
    const script_animation = 30
    const sound = 17
    const take_item_from_box = 34
    const task_state = 13
    const trade_perform_operation = 3
    const trade_sell_buy_item = 2
    const trade_start = 0
    const trade_stop = 1
    const trader_global_anim_request = 31
    const trader_head_anim_request = 32
    const trader_sound_end = 33
    const use_object = 15
    const weapon_no_ammo = 35
    const zone_enter = 4
    const zone_exit = 5
}

class snd_type {
    const ambient = 128
    const anomaly = 268435456
    const anomaly_idle = 268437504
    const attack = 8192
    const bullet_hit = 524288
    const die = 131072
    const drop = 33554432
    const eat = 4096
    const empty = 1048576
    const hide = 16777216
    const idle = 2048
    const injure = 65536
    const item = 1073741824
    const item_drop = 1107296256
    const item_hide = 1090519040
    const item_pick_up = 1140850688
    const item_take = 1082130432
    const item_use = 1077936128
    const monster = 536870912
    const monster_attack = 536879104
    const monster_die = 537001984
    const monster_eat = 536875008
    const monster_injure = 536936448
    const monster_step = 536903680
    const monster_talk = 536887296
    const no_sound = 0
    const object_break = 1024
    const object_collide = 512
    const object_explode = 256
    const pick_up = 67108864
    const reload = 262144
    const shoot = 2097152
    const step = 32768
    const take = 8388608
    const talk = 16384
    const use = 4194304
    const weapon = -2147483648
    const weapon_bullet_hit = -2146959360
    const weapon_empty = -2146435072
    const weapon_reload = -2147221504
    const weapon_shoot = -2145386496
    const world = 134217728
    const world_ambient = 134217856
    const world_object_break = 134218752
    const world_object_collide = 134218240
    const world_object_explode = 134217984
}

class task {
    const additional = 1
    const completed = 2
    const fail = 0
    const in_progress = 1
    const storyline = 0
    const task_dummy = 65535
}

class ui_events {
    const BUTTON_CLICKED = 17
    const BUTTON_DOWN = 18
    const CHECK_BUTTON_RESET = 21
    const CHECK_BUTTON_SET = 20
    const EDIT_TEXT_COMMIT = 71
    const LIST_ITEM_CLICKED = 35
    const LIST_ITEM_SELECT = 36
    const MESSAGE_BOX_CANCEL_CLICKED = 44
    const MESSAGE_BOX_COPY_CLICKED = 45
    const MESSAGE_BOX_NO_CLICKED = 43
    const MESSAGE_BOX_OK_CLICKED = 39
    const MESSAGE_BOX_QUIT_GAME_CLICKED = 42
    const MESSAGE_BOX_QUIT_WIN_CLICKED = 41
    const MESSAGE_BOX_YES_CLICKED = 40
    const PROPERTY_CLICKED = 38
    const RADIOBUTTON_SET = 22
    const SCROLLBAR_HSCROLL = 32
    const SCROLLBAR_VSCROLL = 31
    const SCROLLBOX_MOVE = 30
    const TAB_CHANGED = 19
    const WINDOW_KEY_PRESSED = 10
    const WINDOW_KEY_RELEASED = 11
    const WINDOW_LBUTTON_DB_CLICK = 9
    const WINDOW_LBUTTON_DOWN = 0
    const WINDOW_LBUTTON_UP = 3
    const WINDOW_MOUSE_MOVE = 6
    const WINDOW_RBUTTON_DOWN = 1
    const WINDOW_RBUTTON_UP = 4
}

class GameGraph__LEVEL_MAP__value_type {
    property id
    property level
}

class MEMBERS__value_type {
    property id
    property object
}

class award_pair_t {
    property first
    property second
}

class best_scores_pair_t {
    property first
    property second
}

class hit_memory_object : entity_memory_object {
    property amount
    property bone_index
    property direction
    property last_level_time
    property level_time
    property object_info
    property self_info
	
    function object(const entity_memory_object&)
}

class memory_info : visible_memory_object {
    property hit_info
    property last_level_time
    property level_time
    property object_info
    property self_info
    property sound_info
    property visual_info
	
    function object(const game_memory_object&)
}

class MonsterSpace {
    const head_anim_angry = 1
    const head_anim_glad = 2
    const head_anim_kind = 3
    const head_anim_normal = 0
    const sound_script = 128
}

class not_yet_visible_object {
    property value
	
    function object(const not_yet_visible_object&)
}

class CSightParams {
    const eSightTypeAnimationDirection = 11
    const eSightTypeCover = 5
    const eSightTypeCoverLookOver = 8
    const eSightTypeCurrentDirection = 0
    const eSightTypeDirection = 2
    const eSightTypeDummy = -1
    const eSightTypeFireObject = 9
    const eSightTypeFirePosition = 10
    const eSightTypeLookOver = 7
    const eSightTypeObject = 4
    const eSightTypePathDirection = 1
    const eSightTypePosition = 3
    const eSightTypeSearch = 6
	
    property m_object
    property m_sight_type
    property m_vector
	
    CSightParams ()
}

class sound_memory_object : game_memory_object {
    property last_level_time
    property level_time
    property object_info
    property power
    property self_info
	
    function object(const game_memory_object&)
    function type() const
}

class visible_memory_object : game_memory_object {
    property last_level_time
    property level_time
    property object_info
    property self_info
	
    function object(const game_memory_object&)
}

class FS_item {
    function Modif()
    function NameFull()
    function NameShort()
    function ModifDigitOnly()
    function Size()
}

class Patch_Dawnload_Progress {
    function GetProgress()
    function GetInProgress()
    function GetStatus()
    function GetFlieName()
}

class color {
    property b
    property g
    property r
	
    color ()
    color (number, number, number)
	
    function set(number, number, number)
}

class SDrawStaticStruct {
    property m_endTime
	
    function wnd()
}

class duality {
    property h
    property v
	
    duality ()
    duality (number, number)
	
    function set(number, number)
}

class memory_object {
    property last_level_time
    property level_time
}

class noise {
    property fps
    property grain
    property intensity
	
    noise ()
    noise (number, number, number)
	
    function set(number, number, number)
}

class object_params {
    property level_vertex
    property position
}

class effector_params {
    property blur
    property color_add
    property color_base
    property color_gray
    property dual
    property gray
    property noise
	
    effector_params ()
	
    function assign(effector_params*, effector_params*)
}

class rotation {
    property pitch
    property yaw
}

class award_data {
    property m_count
    property m_last_reward_date
}

class fs_file {
    property modif
    property name
    property ptr
    property size_compressed
    property size_real
    property vfs
}

class color_animator {
    color_animator (string)
	
    function calculate(number)
    function load(string)
    function length()
}

class profile {
    function unique_nick() const
    function online() const
}

class profile_timer {
    profile_timer ()
    profile_timer (profile_timer&)
	
    operator +(const profile_timer&, profile_timer)
    operator <(const profile_timer&, profile_timer)
	
    function stop()
    function start()
    function time() const
    function __tostring(profile_timer&)
}

class token {
    property id
    property name
	
    token ()
}

class action_base {
    property object
    property storage
	
    action_base ()
    action_base (game_object*)
    action_base (game_object*, string)
	
    function finalize()
    function add_precondition(const world_property&)
    function execute()
    function remove_precondition(const number&)
    function setup(game_object*, property_storage*)
    function set_weight(const number&)
    function add_effect(const world_property&)
    function show(string)
    function initialize()
    function remove_effect(const number&)
}

class action_planner {
    property object
    property storage
	
    action_planner ()
	
    function initialized() const
    function remove_action(const number&)
    function action(const number&)
    function add_action(const number&, action_base*)
    function show(string)
    function update()
    function clear()
    function evaluator(const number&)
    function setup(game_object*)
    function set_goal_world_state(action_planner*, world_state*)
    function current_action()
    function add_evaluator(const number&, property_evaluator*)
    function remove_evaluator(const number&)
    function current_action_id() const
    function actual(const action_planner*)
}

class planner_action : action_planner,action_base {
    property object
    property storage
    planner_action ()
    planner_action (game_object*)
    planner_action (game_object*, string)
	
    function finalize()
    function action(const number&)
    function add_precondition(const world_property&)
    function add_action(const number&, action_base*)
    function update()
    function remove_effect(const number&)
    function current_action()
    function current_action_id() const
    function initialized() const
    function weight(const world_state&, const world_state&) const
    function initialize()
    function actual(const action_planner*)
    function remove_action(const number&)
    function remove_precondition(const number&)
    function execute()
    function clear()
    function evaluator(const number&)
    function set_goal_world_state(action_planner*, world_state*)
    function set_weight(const number&)
    function add_effect(const world_property&)
    function show(string)
    function setup(game_object*)
    function setup(game_object*, property_storage*)
    function remove_evaluator(const number&)
    function add_evaluator(const number&, property_evaluator*)
}

class world_state {
    world_state ()
    world_state (world_state)
	
    operator <(const world_state&, world_state)
    operator ==(const world_state&, world_state)
	
    function clear()
    function includes(const world_state&) const
    function remove_property(const number&)
    function add_property(const world_property&)
    function property(const number&) const
}

class world_property {
    world_property (number, boolean)
    
    operator <(const world_property&, world_property)
    operator ==(const world_property&, world_property)
	
	function value() const
	function condition() const
}

class property_evaluator {
    property object
    property storage
    property_evaluator ()
    property_evaluator (game_object*)
    property_evaluator (game_object*, string)
	
    function evaluate()
    function setup(game_object*, property_storage*)
}

class property_evaluator_const : property_evaluator {
    property object
    property storage
    property_evaluator_const (boolean)
	
    function evaluate()
    function setup(game_object*, property_storage*)
}

class ipure_alife_load_object {
}

class ipure_alife_save_object {
}

class ipure_alife_load_save_object : ipure_alife_load_object,ipure_alife_save_object {
}

class Fbox {
    property max
    property min
    Fbox ()
}

class suggest_nicks_cb {
    suggest_nicks_cb ()
    suggest_nicks_cb (object, function<void>)
	
    function bind(object, function<void>)
    function clear()
}

class account_profiles_cb {
    account_profiles_cb ()
    account_profiles_cb (object, function<void>)
    function bind(object, function<void>)
    function clear()
}

class login_operation_cb {
    login_operation_cb ()
    login_operation_cb (object, function<void>)
	
    function bind(object, function<void>)
    function clear()
}

class account_operation_cb {
    account_operation_cb ()
    account_operation_cb (object, function<void>)
	
    function bind(object, function<void>)
    function clear()
}

class found_email_cb {
    found_email_cb ()
    found_email_cb (object, function<void>)
	
    function bind(object, function<void>)
    function clear()
}

class store_operation_cb {
    store_operation_cb ()
    store_operation_cb (object, function<void>)
	
    function bind(object, function<void>)
    function clear()
}

class CAI_Bloodsucker : CGameObject {
    CAI_Bloodsucker ()
	
    function Visual() const
    function getEnabled() const
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function force_visibility_state(number)
    function net_Export(net_packet&)
    function _construct()
    function use(CGameObject*)
}

class CAI_Boar : CGameObject {
    CAI_Boar ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CAI_Dog : CGameObject {
    CAI_Dog ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CAI_Flesh : CGameObject {
    CAI_Flesh ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CAI_PseudoDog : CGameObject {
    CAI_PseudoDog ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CAI_Stalker : CGameObject {
    CAI_Stalker ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CAI_Trader : CGameObject {
    CAI_Trader ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CALifeHumanBrain : CALifeMonsterBrain {
    function can_choose_alife_tasks(boolean)
    function update()
    function movement(const CALifeMonsterBrain*)
}

class CALifeMonsterBrain {
    function can_choose_alife_tasks(boolean)
    function update()
    function movement(const CALifeMonsterBrain*)
}

class CALifeMonsterDetailPathManager {
    function completed() const
    function target(const number&, const number&, const vector&)
    function target(const number&)
    function target(const CALifeSmartTerrainTask*)
    function failed() const
    function speed	(const number&)
    function speed	() const
    function actual() const
}

class CALifeMonsterMovementManager {
    function completed() const
    function patrol(const CALifeMonsterMovementManager*)
    function actual() const
    function path_type(const enum MovementManager::EPathType&)
    function path_type() const
    function detail(const CALifeMonsterMovementManager*)
}

class CALifeMonsterPatrolPathManager {
    function path(string)
    function target_game_vertex_id() const
    function target_position(CALifeMonsterPatrolPathManager*)
    function target_level_vertex_id() const
    function completed() const
    function route_type(const enum PatrolPathManager::EPatrolRouteType&)
    function route_type() const
    function use_randomness(const boolean&)
    function use_randomness() const
    function start_type(const enum PatrolPathManager::EPatrolStartType&)
    function start_type() const
    function start_vertex_index(const number&)
    function actual() const
}

class alife_simulator {
    function level_name(const alife_simulator*, number)
    function create_ammo(alife_simulator*, string, const vector&, number, number, number, number)
    function add_out_restriction(alife_simulator*, cse_alife_monster_abstract*, number)
    function set_interactive(number, boolean)
    function add_in_restriction(alife_simulator*, cse_alife_monster_abstract*, number)
    function remove_in_restriction(alife_simulator*, cse_alife_monster_abstract*, number)
    function level_id(alife_simulator*)
    function valid_object_id(const alife_simulator*, number)
    function remove_out_restriction(alife_simulator*, cse_alife_monster_abstract*, number)
    function switch_distance() const
    function switch_distance(number)
    function kill_entity(cse_alife_monster_abstract*, const number&, cse_alife_schedulable*)
    function kill_entity(alife_simulator*, cse_alife_monster_abstract*, const number&)
    function kill_entity(alife_simulator*, cse_alife_monster_abstract*)
    function set_switch_online(number, boolean)
    function set_switch_offline(number, boolean)
    function has_info(const alife_simulator*, const number&, string)
	function dont_has_info(const alife_simulator*, const number&, string)
	function disable_info(const alife_simulator*, const number&, string)
	function give_info(const alife_simulator*, const number&, string)
    function remove_all_restrictions(number, const enum RestrictionSpace::ERestrictorTypes&)
    function object(const alife_simulator*, number)
    function object(const alife_simulator*, number, boolean)
    function actor(const alife_simulator*)
    function story_object(const alife_simulator*, number)
    function spawn_id(alife_simulator*, number)
    function release(alife_simulator*, cse_abstract*, boolean)
    function create(alife_simulator*, number)
    function create(alife_simulator*, string, const vector&, number, number, number)
    function create(alife_simulator*, string, const vector&, number, number)
	function teleport_object(number,number,number,vector&) -- Alundaio: (id,game_vertex_id,level_vertex_id,position)
	function get_children(const alife_simulator*, cse_abstract*)
}

class CALifeSmartTerrainTask {
    CALifeSmartTerrainTask (string)
    CALifeSmartTerrainTask (string, number)
    CALifeSmartTerrainTask (number, number)
	
    function level_vertex_id() const
    function position() const
    function game_vertex_id() const
}



class CAntirad : CGameObject {
    CAntirad ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CArtefact : CGameObject {
	property m_bCanSpawnZone
	property m_fHealthRestoreSpeed
	property m_fRadiationRestoreSpeed
	property m_fSatietyRestoreSpeed
	property m_fPowerRestoreSpeed
	property m_fBleedingRestoreSpeed
	
    CArtefact ()
	
    function Visual() const
    function getEnabled() const
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function _construct()
    function net_Export(net_packet&)
    function GetAfRank() const
	function ActivateArtefact()
	function CanBeActivated()
	function AdditionalInventoryWeight()
    function use(CGameObject*)
}

class CBastArtefact : CArtefact {
    CBastArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CBlackDrops : CArtefact {
    CBlackDrops ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CBlackGraviArtefact : CArtefact {
    CBlackGraviArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CBlend {
}

class CBottleItem : CGameObject {
    CBottleItem ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
	function BreakToPieces()
    function use(CGameObject*)
}

class CBurer : CGameObject {
    CBurer ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CCar : CGameObject,holder {
    const eWpnActivate = 3
    const eWpnAutoFire = 5
    const eWpnDesiredDir = 1
    const eWpnDesiredPos = 2
    const eWpnFire = 4
    const eWpnToDefaultDir = 6
	
    CCar ()
	
    function _construct()
    function GetfHealth() const
    function CurrentVel()
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SetParam(number, vector)
    function net_Export(net_packet&)
    function Visual() const
    function IsObjectVisible(game_object*)
    function SetExplodeTime(number)
    function net_Import(net_packet&)
    function HasWeapon()
    function SetfHealth(number)
    function engaged()
    function ExplodeTime()
    function FireDirDiff()
    function CarExplode()
    function CanHit()
    function getEnabled() const
    function Action(number, number)
    function use(CGameObject*)
	function GetfFuel()
	function SetfFuel(number)
	function GetfFuelTank()
	function SetfFuelTank(number)
	function GetfFuelConsumption()
	function SetfFuelConsumption(number)
	function ChangefFuel(number)
	function ChangefHealth(number)
	function PlayDamageParticles()
	function StopDamageParticles()
	function StartEngine()
	function StopEngine()
	function IsActiveEngine()
	function HandBreak()
	function ReleaseHandBreak()
	function GetRPM()
	function SetRPM(number)
}

class CCat : CGameObject {
    CCat ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CChimera : CGameObject {
    CChimera ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class client_spawn_manager {
    function remove(number, number)
    function add(number, number, const function<void>&, object)
    function add(number, number, const function<void>&)
}

class CConsole {
    function execute_script(string)
    function get_string(string)
    function execute(string)
    function get_bool(CConsole*, string)
    function get_float(CConsole*, string)
    function get_integer(CConsole*, string)
    function execute_deferred(CConsole*, string)
    function get_token(string)
    function show()
    function hide()
}

class CController : CGameObject {
    CController ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CCustomOutfit : CGameObject {
	CCustomOutfit()

	property bIsHelmetAvaliable
	property bIsBackpackAvaliable
	property m_additional_weight
	property m_additional_weight2
	property m_fBleedingRestoreSpeed
	property m_fHealthRestoreSpeed
	property m_fPowerLoss
	property m_fPowerRestoreSpeed
	property m_fRadiationRestoreSpeed
	property m_fSatietyRestoreSpeed

	function _construct()
	function BonePassBullet(number)
	function get_HitFracActor()
	function get_artefact_count() const
	function getEnabled() const
	function getVisible() const
	function net_Export(net_packet&)
	function net_Import(net_packet&)
	function net_Spawn(cse_abstract*)
	function use(CGameObject*)
	function Visual() const
	function GetDefHitTypeProtection(number)
	function GetHitTypeProtection(number, string)
	function GetBoneArmor(number)
}

class cover_point {
    function level_vertex_id() const
    function is_smart_cover(const cover_point*)
    function position() const
}

class danger_object {
    const attack_sound = 1
    const attacked = 5
    const bullet_ricochet = 0
    const enemy_sound = 7
    const entity_attacked = 2
    const entity_corpse = 4
    const entity_death = 3
    const grenade = 6
    const hit = 2
    const sound = 1
    const visual = 0
	
	operator ==(const danger_object&, danger_object)
	
    function type() const
    function time() const
    function position(const danger_object*)
    function object(const danger_object*)
    function perceive_type() const
    function dependent_object(const danger_object*)
}

class CDestroyablePhysicsObject : CGameObject {
    CDestroyablePhysicsObject ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CDialogHolder {
    function RemoveDialogToRender(CUIWindow*)
    function AddDialogToRender(CUIWindow*)
}

class CPhraseScript {
    function SetScriptText(string)
    function AddHasInfo(string)
    function AddGiveInfo(string)
    function AddDisableInfo(string)
    function AddDontHasInfo(string)
    function AddAction(string)
    function AddPrecondition(string)
}

class CDummyArtefact : CArtefact {
    CDummyArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class cef_storage {
    function evaluate(cef_storage*, string, game_object*)
    function evaluate(cef_storage*, string, game_object*, game_object*)
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*)
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*, game_object*)
    function evaluate(cef_storage*, string, cse_alife_object*)
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*)
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*)
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*, cse_alife_object*)
}

class CEatableItem : CInventoryItem {
	property m_bRemoveAfterUse
	property m_fWeightEmpty
	property m_fWeightFull

	function ActivateItem()
	function CanDelete() const
	function CanStack() const
	function CanTake() const
	function Cost() const
	function DeactivateItem()
	function Empty() const
	function GetCondition() const
	function GetDropManual() const
	function GetIconName() const
	function GetMaxUses()
	function GetRemainingUses() const
	function HandDependence() const
	function has_any_upgrades()
	function install_upgrade(string)
	function IsQuestItem() const
	function IsUsingCondition() const
	function ItemDescription()
	function NameItem()
	function NameShort()
	function pre_install_upgrade()
	function SetCondition(number)
	function SetDropManual(number)
	function SetRemainingUses(number)
	function SetWeight(number)
	function Useful() const
	function verify_upgrade(string)
	function Weight() const
}

class CElectricBall : CArtefact {
    CElectricBall ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class explosive {
    function explode()
}

class CExplosiveItem : CGameObject {
    CExplosiveItem ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CF1 : CGameObject {
    CF1 ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CFadedBall : CArtefact {
    CFadedBall ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CFoodItem : CGameObject {
    CFoodItem ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CFracture : CGameObject {
    CFracture ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CGalantineArtefact : CArtefact {
    CGalantineArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CGameFont {
    const alCenter = 2
    const alLeft = 0
    const alRight = 1
}

class CGameGraph {
    function valid_vertex_id(number) const
    function vertex(number) const
    function accessible(const CGameGraph*, const number&)
    function accessible(const CGameGraph*, const number&, boolean)
    function levels(const CGameGraph*)
    function vertex_id(const GameGraph__CVertex*) const
}

class CGameTask {
    CGameTask ()
	
    function get_id()
    function set_priority(number)
    function set_title(string)
    function set_map_hint(string)
    function get_title()
    function add_on_fail_info(string)
    function add_complete_func(string)
    function add_fail_func(string)
    function remove_map_locations(boolean)
    function add_fail_info(string)
    function add_complete_info(string)
    function set_type(number)
    function set_map_object_id(number)
    function set_description(string)
    function set_id(string)
    function add_on_fail_func(string)
    function add_on_complete_func(string)
    function set_icon_name(string)
    function set_map_location(string)
    function change_map_location(string, number)
    function add_on_complete_info(string)
    function get_priority()
}

class CGraviArtefact : CArtefact {
    CGraviArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CGrenadeLauncher : CGameObject {
    CGrenadeLauncher ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CHairsZone : CGameObject {
    CHairsZone ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class hanging_lamp : CGameObject {
    hanging_lamp ()
	
	function Visual() const
    function getEnabled() const
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function turn_on()
    function turn_off()
    function net_Export(net_packet&)
    function _construct()
    function use(CGameObject*)
}

class CHelicopter : CGameObject {
    const eAlive = 0
    const eBodyByPath = 0
    const eBodyToPoint = 1
    const eDead = 1
    const eEnemyEntity = 2
    const eEnemyNone = 0
    const eEnemyPoint = 1
    const eMovLanding = 4
    const eMovNone = 0
    const eMovPatrolPath = 2
    const eMovRoundPath = 3
    const eMovTakeOff = 5
    const eMovToPoint = 1
	
    property m_dead
    property m_exploded
    property m_flame_started
    property m_light_started
    property m_max_mgun_dist
    property m_max_rocket_dist
    property m_min_mgun_dist
    property m_min_rocket_dist
    property m_syncronize_rocket
    property m_time_between_rocket_attack
    property m_use_mgun_on_attack
    property m_use_rocket_on_attack
	
    CHelicopter ()
	
    function _construct()
    function SetSpeedInDestPoint(number)
    function getVisible() const
    function LookAtPoint(vector, boolean)
    function GetRealAltitude()
    function GetCurrVelocity()
    function SetLinearAcc(number, number)
    function GoPatrolByPatrolPath(string, number)
    function GetSpeedInDestPoint(number)
    function isVisible(game_object*)
    function net_Import(net_packet&)
    function SetMaxVelocity(number)
    function SetfHealth(number)
    function GetMovementState()
    function SetEnemy(game_object*)
    function SetEnemy(vector*)
    function getEnabled() const
    function GetfHealth() const
    function Explode()
    function SetOnPointRangeDist(number)
    function SetFireTrailLength(number)
    function GetOnPointRangeDist()
    function GetMaxVelocity()
    function TurnLighting(boolean)
    function SetBarrelDirTolerance(number)
    function GetBodyState()
    function GetCurrVelocityVec()
    function net_Export(net_packet&)
    function SetDestPosition(vector*)
    function UseFireTrail()
    function UseFireTrail(boolean)
    function GoPatrolByRoundPath(vector, number, boolean)
    function net_Spawn(cse_abstract*)
    function GetState()
    function Die()
    function StartFlame()
    function Visual() const
    function GetDistanceToDestPosition()
    function GetHuntState()
    function TurnEngineSound(boolean)
    function GetSafeAltitude()
    function ClearEnemy()
    function use(CGameObject*)
}

class CHelmet : CGameObject {
	property m_fPowerLoss
	property m_fHealthRestoreSpeed
	property m_fRadiationRestoreSpeed
	property m_fSatietyRestoreSpeed
	property m_fPowerRestoreSpeed
	property m_fBleedingRestoreSpeed

	CHelmet()

	function _construct()
	function getEnabled() const
	function getVisible() const
	function net_Export(net_packet&)
	function net_Import(net_packet&)
	function net_Spawn(cse_abstract*)
	function use(CGameObject*)
	function Visual() const
	function get_HitFracActor()
	function GetDefHitTypeProtection(number)
	function GetHitTypeProtection(number, string)
	function GetBoneArmor(number)
}

class holder {
    function engaged()
    function Action(number, number)
    function SetParam(number, vector)
}

class CInventoryBox : CGameObject {
    CInventoryBox ()
	
    function _construct()
	function can_take() const
	function getEnabled() const
	function getVisible() const
	function net_Export(net_packet&)
	function net_Import(net_packet&)
	function net_Spawn(cse_abstract*)
	function set_can_take(boolean)
	function set_closed(boolean, string)
	function use(CGameObject*)
	function Visual() const
}

class CInventoryItem {

}

class CInventoryOwner() {
	function IconName()
	function get_money()
	function EnableTalk()
	function DisableTalk()
	function IsTalkEnabled()
	function EnableTrade()
	function DisableTrade()
	function IsTradeEnabled()
	function EnableInvUpgrade()
	function DisableInvUpgrade()
	function IsInvUpgradeEnabled()
	function GetTalkPartner()
	function OfferTalk(CInventoryOwner*)
	function StartTalk(CInventoryOwner*, boolean)
	function StopTalk()
	function IsTalking()
	function deadbody_can_take(boolean)
	function deadbody_can_take_status()
	function deadbody_closed(boolean)
	function deadbody_closed_status()
}
	
class CLevelChanger : CGameObject {
    CLevelChanger ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class FS {
    const FS_ClampExt = 4
    const FS_ListFiles = 1
    const FS_ListFolders = 2
    const FS_RootOnly = 8
    const FS_sort_by_modif_down = 5
    const FS_sort_by_modif_up = 4
    const FS_sort_by_name_down = 1
    const FS_sort_by_name_up = 0
    const FS_sort_by_size_down = 3
    const FS_sort_by_size_up = 2
	
    function get_file_age(string)
    function file_length(string)
    function file_rename(string, string, boolean)
    function r_open(string, string)
    function r_open(string)
    function append_path(string, string, string, number)
    function file_copy(string, string)
    function get_file_age_str(FS*, string)
    function dir_delete(FS*, string, number)
    function dir_delete(FS*, string, string, number)
    function update_path(FS*, string, string)
    function r_close(reader*&)
    function exist(string)
    function exist(string, string)
    function w_close(class IWriter*&)
    function file_list_open(FS*, string, number)
    function file_list_open(FS*, string, string, number)
    function path_exist(string)
    function file_list_open_ex(FS*, string, number, string)
    function get_path(string)
    function file_delete(string, string)
    function file_delete(string)
    function w_open(string, string)
    function w_open(string)
	function rescan_path(FS*, string)
	function rescan_pathes(FS*)
	
}

class CMainMenu {
    function GetCDKey()
    function GetAccountMngr()
    function GetDemoInfo(string)
    function GetPatchProgress()
    function GetProfileStore()
    function GetGSVer()
    function CancelDownload()
    function GetLoginMngr()
    function ValidateCDKey()
    function GetPlayerName()
}

class CMedkit : CGameObject {
    CMedkit ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CMercuryBall : CArtefact {
    CMercuryBall ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CMincer : CGameObject {
    CMincer ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CMosquitoBald : CGameObject {
    CMosquitoBald ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class object_factory {
    function register(string, string, string, string)
    function register(string, string, string)
}

class particle_params {
    particle_params ()
    particle_params (const vector&)
    particle_params (const vector&, const vector&)
    particle_params (const vector&, const vector&, const vector&)
}

class patrol {
    const continue = 1
    const custom = 3
    const dummy = -1
    const nearest = 2
    const next = 4
    const start = 0
    const stop = 0
	
    patrol (string)
    patrol (string, enum PatrolPathManager::EPatrolStartType)
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType)
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean)
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean, number)
	
    function level_vertex_id(number) const
    function point(const patrol*, number)
    function flag(number, number) const
    function game_vertex_id(number) const
    function flags(number) const
    function name(number) const
    function index(string) const
    function terminal(number) const
    function count() const
    function get_nearest(const vector&) const
}

class CPda : CGameObject {
    CPda ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CPhrase {
    function GetPhraseScript()
}

class CPhraseDialog {
    function AddPhrase(string, string, string, number)
}

class CPhysicObject : CGameObject {
    CPhysicObject ()
	
    function set_door_ignore_dynamics()
    function _construct()
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function play_bones_sound()
    function run_anim_back()
    function net_Export(net_packet&)
    function Visual() const
    function unset_door_ignore_dynamics()
    function net_Import(net_packet&)
    function run_anim_forward()
    function stop_anim()
    function anim_time_get()
    function getEnabled() const
    function anim_time_set(number)
    function stop_bones_sound()
    function use(CGameObject*)
}

class CPoltergeist : CGameObject {
    CPoltergeist ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class property_storage {
    property_storage ()
    function property(const number&) const
    function set_property(const number&, const boolean&)
}

class CPseudoGigant : CGameObject {
    CPseudoGigant ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CPsyDog : CGameObject {
    CPsyDog ()
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CPsyDogPhantom : CGameObject {
    CPsyDogPhantom ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class cpure_server_object : ipure_server_object {
}

class CRGD5 : CGameObject {
    CRGD5 ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CRadioactiveZone : CGameObject {
    CRadioactiveZone ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class render_device {
    property aspect_ratio
    property cam_dir
    property cam_pos
    property cam_right
    property cam_top
    property f_time_delta
    property fov
    property frame
    property height
    property precache_frame
    property time_delta
    property width
	
    function time_global(const render_device*)
    function is_paused(render_device*)
    function pause(render_device*, boolean)
}

class CRustyHairArtefact : CArtefact {
    CRustyHairArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CSavedGameWrapper {
    CSavedGameWrapper (string)
	
    function level_name() const
    function level_id() const
    function game_time(const CSavedGameWrapper*)
    function actor_health() const
}

class CScope : CGameObject {
    CScope ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class cond {
    const act_end = 128
    const anim_end = 4
    const look_end = 2
    const move_end = 1
    const object_end = 32
    const sound_end = 8
    const time_end = 64
	
    cond ()
    cond (number)
    cond (number, double)
}

class anim {
    const attack = 7
    const capture_prepare = 1
    const danger = 0
    const eat = 4
    const free = 1
    const lie_idle = 3
    const look_around = 8
    const panic = 2
    const rest = 6
    const sit_idle = 2
    const sleep = 5
    const stand_idle = 0
    const turn = 9
	
    anim ()
    anim (string)
    anim (string, boolean)
    anim (enum MonsterSpace::EMentalState)
    anim (enum MonsterSpace::EScriptMonsterAnimAction, number)
	
    function completed()
    function type(enum MonsterSpace::EMentalState)
    function anim(string)
}

class object_binder {
    property object
	
    object_binder (game_object*)
	
    function save(net_packet*)
    function update(number)
    function reload(string)
    function net_export(net_packet*)
    function net_save_relevant()
    function load(reader*)
    function net_destroy()
    function reinit()
    function net_Relcase(game_object*)
    function net_spawn(cse_alife_object*)
    function net_import(net_packet*)
}

class effector {
    effector (number, number)
	
    function start(effector*)
    function process(effector_params*)
    function finish(effector*)
}

class entity_action {
    entity_action ()
    entity_action (const entity_action*)
	
    function set_action(move&)
    function set_action(look&)
    function set_action(anim&)
    function set_action(sound&)
    function set_action(particle&)
    function set_action(object&)
    function set_action(cond&)
    function set_action(act&)
    function move() const
    function particle() const
    function completed()
    function object() const
    function all()
    function time()
    function look() const
    function sound() const
    function anim() const
}

class act {
    const attack = 2
    const eat = 1
    const panic = 3
    const rest = 0
	
    act ()
    act (enum MonsterSpace::EScriptMonsterGlobalAction)
    act (enum MonsterSpace::EScriptMonsterGlobalAction, game_object*)
}

class MonsterHitInfo {
    property direction
    property time
    property who
}

class move {
    const back = 4
    const criteria = 2
    const crouch = 0
    const curve = 0
    const curve_criteria = 2
    const default = 0
    const dodge = 1
    const down = 64
    const drag = 3
    const force = 1
    const fwd = 2
    const handbrake = 128
    const jump = 4
    const left = 8
    const line = 0
    const none = 1
    const off = 512
    const on = 256
    const right = 16
    const run = 1
    const run_fwd = 2
    const run_with_leader = 7
    const stand = 2
    const standing = 1
    const steal = 5
    const up = 32
    const walk = 0
    const walk_bkwd = 1
    const walk_fwd = 0
    const walk_with_leader = 6
	
    move ()
    move (enum CScriptMovementAction::EInputKeys)
    move (enum CScriptMovementAction::EInputKeys, number)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*, number)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, patrol*)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, patrol*, number)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, vector*)
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, vector*, number)
    move (vector*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector*)
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number)
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector*, number, enum MonsterSpace::EScriptMonsterSpeedParam)
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol*, number, enum MonsterSpace::EScriptMonsterSpeedParam)
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number, enum MonsterSpace::EScriptMonsterSpeedParam)
	
    function completed()
    function path(enum DetailPathManager::EDetailPathType)
    function move(enum MonsterSpace::EMovementType)
    function position(const vector&)
    function input(enum CScriptMovementAction::EInputKeys)
    function patrol(const class CPatrolPath*, class shared_str)
    function object(game_object*)
    function body(enum MonsterSpace::EBodyState)
}

class object {
    const activate = 16
    const aim1 = 4
    const aim2 = 5
    const deactivate = 17
    const drop = 11
    const dummy = -1
    const fire1 = 6
    const fire2 = 8
    const hide = 22
    const idle = 9
    const reload = 2
    const reload1 = 2
    const reload2 = 3
    const show = 21
    const strap = 10
    const switch1 = 0
    const switch2 = 1
    const take = 23
    const turn_off = 20
    const turn_on = 19
    const use = 18
	
    object ()
    object (game_object*, enum MonsterSpace::EObjectAction)
    object (game_object*, enum MonsterSpace::EObjectAction, number)
    object (enum MonsterSpace::EObjectAction)
    object (string, enum MonsterSpace::EObjectAction)
	
    function completed()
    function object(string)
    function object(game_object*)
    function action(enum MonsterSpace::EObjectAction)
}

class particle {
    particle ()
    particle (string, string)
    particle (string, string, const particle_params&)
    particle (string, string, const particle_params&, boolean)
    particle (string, const particle_params&)
    particle (string, const particle_params&, boolean)
	
    function set_velocity(const vector&)
    function set_position(const vector&)
    function set_bone(string)
    function set_angles(const vector&)
    function completed()
    function set_particle(string, boolean)
}

class particles_object {
    particles_object (string)
	
    function pause_path(boolean)
    function play_at_pos(const vector&)
    function move_to(const vector&, const vector&)
    function looped() const
    function load_path(string)
    function start_path(boolean)
    function stop()
    function stop_path()
    function stop_deffered()
    function play()
    function playing() const
}

class rtoken_list {
    rtoken_list ()
	
    function clear()
    function remove(number)
    function count()
    function get(number)
    function add(string)
}

class sound_object {
    const looped = 1
    const s2d = 2
    const s3d = 0
	
    property frequency
    property max_distance
    property min_distance
    property volume
	
    sound_object (string)
    sound_object (string, enum ESoundTypes)
	
    function set_position(const vector&)
    function stop_deffered()
    function get_position() const
    function stop()
    function play_no_feedback(game_object*, number, number, vector, number, number)
    function play_at_pos(game_object*, const vector&)
    function play_at_pos(game_object*, const vector&, number)
    function play_at_pos(game_object*, const vector&, number, number)
    function attach_tail(string)
    function length()
    function play(game_object*)
    function play(game_object*, number)
    function play(game_object*, number, number)
    function playing() const
}

class sound {
    const attack = 3
    const attack_hit = 4
    const die = 7
    const eat = 2
    const idle = 1
    const panic = 11
    const steal = 10
    const take_damage = 5
    const threaten = 9
	
    sound ()
    sound (string, string)
    sound (string, string, const vector&)
    sound (string, string, const vector&, const vector&)
    sound (string, string, const vector&, const vector&, boolean)
    sound (string, vector*)
    sound (string, vector*, const vector&)
    sound (string, vector*, const vector&, boolean)
    sound (sound_object*, string, const vector&)
    sound (sound_object*, string, const vector&, const vector&)
    sound (sound_object*, string, const vector&, const vector&, boolean)
    sound (sound_object*, vector*)
    sound (sound_object*, vector*, const vector&)
    sound (sound_object*, vector*, const vector&, boolean)
    sound (enum MonsterSound::EType)
    sound (enum MonsterSound::EType, number)
    sound (string, string, enum MonsterSpace::EMonsterHeadAnimType)
	
    function set_sound(string)
    function set_sound(const sound_object&)
    function set_position(const vector&)
    function set_bone(string)
    function set_angles(const vector&)
    function set_sound_type(enum ESoundTypes)
    function completed()
}

class SoundInfo {
    property danger
    property position
    property power
    property time
    property who
}

class token_list {
    token_list ()
	
    function clear()
    function remove(string)
    function name(number)
    function id(string)
    function add(string, number)
}

class look {
    const cur_dir = 0
    const danger = 5
    const direction = 2
    const fire_point = 10
    const path_dir = 1
    const point = 3
    const search = 6
	
    look ()
    look (enum SightManager::ESightType)
    look (enum SightManager::ESightType, vector&)
    look (enum SightManager::ESightType, game_object*)
    look (enum SightManager::ESightType, game_object*, string)
    look (const vector&, number, number)
    look (game_object*, number, number)
	
    function completed()
    function type(enum SightManager::ESightType)
    function object(game_object*)
    function bone(string)
    function direct(const vector&)
}


class ScriptLight {
-- Allows you to create a customizable light source

	script_light ()
	
	property color -- ARBG
	property texture
	property enabled -- bloolean
	property type -- number
	property range -- number
	property shadow
	property lanim -- string
	property lanim_brightness -- number
	property volumetric -- bloolean
	property volumetric_quality -- number
	property volumetric_distance -- number
	property volumetric_intensity -- number
	property hud_mode
	
	function set_position(vector)
	function set_direction(vector)
	function update()
	
	--[[
		Example of use:
			local light = script_light()
			light.lanim = "koster_01_electra"
			light.lanim_brightness = 0.025
			light.volumetric = true
			light.volumetric_quality = 1
			light:update()
	--]]
}

class ScriptGlow {
	script_glow ()
	
	property enabled -- bloolean
	property texture
	property range -- number
	property color -- ARBG
	property lanim -- string
	property lanim_brightness -- number
	
	function set_position(vector)
	function set_direction(vector)
end

class CScriptXmlInit {
    CScriptXmlInit ()
	
    function InitSpinText(string, CUIWindow*)
    function InitTab(string, CUIWindow*)
    function InitStatic(string, CUIWindow*)
    function InitSleepStatic(string, CUIWindow*)
    function InitTextWnd(string, CUIWindow*)
    function InitSpinFlt(string, CUIWindow*)
    function InitProgressBar(string, CUIWindow*)
    function InitSpinNum(string, CUIWindow*)
    function InitMapList(string, CUIWindow*)
    function ParseFile(string)
    function InitCDkey(string, CUIWindow*)
    function InitListBox(string, CUIWindow*)
    function InitKeyBinding(string, CUIWindow*)
    function InitMMShniaga(string, CUIWindow*)
    function InitWindow(string, number, CUIWindow*)
    function InitEditBox(string, CUIWindow*)
    function InitCheck(string, CUIWindow*)
    function InitScrollView(string, CUIWindow*)
    function InitMPPlayerName(string, CUIWindow*)
    function InitTrackBar(string, CUIWindow*)
    function InitMapInfo(string, CUIWindow*)
    function InitServerList(string, CUIWindow*)
    function InitComboBox(string, CUIWindow*)
    function InitFrameLine(string, CUIWindow*)
    function Init3tButton(string, CUIWindow*)
    function InitAnimStatic(string, CUIWindow*)
    function InitFrame(string, CUIWindow*)
}

class ce_script_zone : DLL_Pure {
    ce_script_zone ()
	
    function _construct()
}

class CServerList : CUIWindow {
    CServerList ()
	
    function SetPlayerName(string)
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetFilters(SServerFilters&)
    function RefreshList(boolean)
    function SetAutoDelete(boolean)
    function SetSortFunc(string, boolean)
    function NetRadioChanged(boolean)
    function AttachChild(CUIWindow*)
    function ShowServerInfo()
    function SetWndPos(vector2)
    function RefreshQuick()
    function ConnectToSelected()
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CSilencer : CGameObject {
    CSilencer ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class ce_smart_zone : DLL_Pure {
    ce_smart_zone ()
	
    function _construct()
}

class CSnork : CGameObject {
    CSnork ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class sound_params {
    property frequency
    property max_distance
    property min_distance
    property position
    property volume
}

class CSpaceRestrictor : CGameObject {
    CSpaceRestrictor ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CStalkerOutfit : CGameObject {
    CStalkerOutfit ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class stalker_ids {
    const action_accomplish_task = 7
    const action_aim_enemy = 16
    const action_alife_planner = 88
    const action_anomaly_planner = 90
    const action_combat_planner = 89
    const action_communicate_with_customer = 9
    const action_critically_wounded = 36
    const action_danger_by_sound_planner = 73
    const action_danger_grenade_look_around = 85
    const action_danger_grenade_planner = 72
    const action_danger_grenade_search = 86
    const action_danger_grenade_take_cover = 82
    const action_danger_grenade_take_cover_after_explosion = 84
    const action_danger_grenade_wait_for_explosion = 83
    const action_danger_in_direction_detour = 80
    const action_danger_in_direction_hold_position = 79
    const action_danger_in_direction_look_out = 78
    const action_danger_in_direction_planner = 71
    const action_danger_in_direction_search = 81
    const action_danger_in_direction_take_cover = 77
    const action_danger_planner = 91
    const action_danger_unknown_look_around = 75
    const action_danger_unknown_planner = 70
    const action_danger_unknown_search = 76
    const action_danger_unknown_take_cover = 74
    const action_dead = 0
    const action_death_planner = 87
    const action_detour_enemy = 25
    const action_dying = 1
    const action_find_ammo = 15
    const action_find_item_to_kill = 13
    const action_gather_items = 2
    const action_get_distance = 24
    const action_get_item_to_kill = 12
    const action_get_ready_to_kill = 17
    const action_hold_position = 23
    const action_kill_enemy = 19
    const action_kill_enemy_if_not_visible = 29
    const action_kill_if_enemy_critically_wounded = 37
    const action_kill_if_player_on_the_path = 35
    const action_kill_wounded_enemy = 33
    const action_look_out = 22
    const action_make_item_killing = 14
    const action_no_alife = 3
    const action_post_combat_wait = 34
    const action_prepare_wounded_enemy = 32
    const action_reach_customer_location = 8
    const action_reach_task_location = 6
    const action_reach_wounded_enemy = 30
    const action_retreat_from_enemy = 20
    const action_script = 92
    const action_search_enemy = 26
    const action_smart_terrain_task = 4
    const action_solve_zone_puzzle = 5
    const action_sudden_attack = 28
    const action_take_cover = 21
    const detect_anomaly = 11
    const get_out_of_anomaly = 10
    const property_alife = 3
    const property_alive = 0
    const property_already_dead = 2
    const property_anomaly = 46
    const property_cover_actual = 42
    const property_cover_reached = 43
    const property_critically_wounded = 29
    const property_danger = 8
    const property_danger_by_sound = 41
    const property_danger_grenade = 40
    const property_danger_in_direction = 39
    const property_danger_unknown = 38
    const property_dead = 1
    const property_enemy = 7
    const property_enemy_critically_wounded = 30
    const property_enemy_detoured = 21
    const property_found_ammo = 12
    const property_found_item_to_kill = 10
    const property_grenade_exploded = 45
    const property_in_cover = 18
    const property_inside_anomaly = 47
    const property_item_can_kill = 11
    const property_item_to_kill = 9
    const property_items = 6
    const property_looked_around = 44
    const property_looked_out = 19
    const property_panic = 17
    const property_position_holded = 20
    const property_pure_enemy = 23
    const property_puzzle_solved = 4
    const property_ready_to_detour = 14
    const property_ready_to_kill = 13
    const property_script = 74
    const property_see_enemy = 15
    const property_smart_terrain_task = 5
    const property_use_crouch_to_look_out = 24
    const property_use_suddenness = 22
    const sound_alarm = 4
    const sound_attack_allies_several_enemies = 7
    const sound_attack_allies_single_enemy = 6
    const sound_attack_no_allies = 5
    const sound_backup = 8
    const sound_detour = 9
    const sound_die = 0
    const sound_die_in_anomaly = 1
    const sound_enemy_critically_wounded = 24
    const sound_enemy_killed_or_wounded = -805289984
    const sound_enemy_lost_no_allies = 12
    const sound_enemy_lost_with_allies = 13
    const sound_friendly_grenade_alarm = 20
    const sound_grenade_alarm = 19
    const sound_humming = 3
    const sound_injuring = 2
    const sound_injuring_by_friend = 14
    const sound_kill_wounded = 23
    const sound_need_backup = 21
    const sound_panic_human = 15
    const sound_panic_monster = 16
    const sound_running_in_danger = 22
    const sound_script = 27
    const sound_search1_no_allies = 11
    const sound_search1_with_allies = 10
    const sound_tolls = 17
    const sound_wounded = 18
}

class CThornArtefact : CArtefact {
    CThornArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class CTorch : CGameObject {
    CTorch ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CTorridZone : CGameObject {
    CTorridZone ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CTushkano : CGameObject {
    CTushkano ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CUI3tButton : CUIButton {
    CUI3tButton ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function TextControl()
    function SetAutoDelete(boolean)
    function Enable(boolean)
    function AttachChild(CUIWindow*)
    function GetTextureRect()
    function SetWndPos(vector2)
    function SetWndSize(vector2)
    function SetWndRect(Frect)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetTextureRect(Frect*)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
    function IsEnabled()
    function ResetPPMode()
    function SetStretchTexture(boolean)
    function IsAutoDelete()
}

class CUIButton : CUIStatic {
    CUIButton ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function TextControl()
    function SetAutoDelete(boolean)
    function SetStretchTexture(boolean)
    function AttachChild(CUIWindow*)
    function Enable(boolean)
    function SetTextureRect(Frect*)
    function ResetPPMode()
    function Show(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndPos(vector2)
    function SetWndRect(Frect)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
    function IsEnabled()
    function SetWndSize(vector2)
    function GetTextureRect()
    function IsAutoDelete()
}

class CUICheckButton : CUI3tButton {
    CUICheckButton ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function TextControl()
    function Enable(boolean)
    function SetAutoDelete(boolean)
    function GetTextureRect()
    function ResetPPMode()
    function SetCheck(boolean)
    function AttachChild(CUIWindow*)
    function SetStretchTexture(boolean)
    function SetTextureRect(Frect*)
    function GetCheck()
    function Show(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndPos(vector2)
    function SetWndRect(Frect)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
    function IsEnabled()
    function SetWndSize(vector2)
    function SetDependControl(CUIWindow*)
    function IsAutoDelete()
}

class CUIComboBox : CUIWindow {
    CUIComboBox ()
	
    function ClearList()
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function enable_id(number)
    function SetWndSize(vector2)
    function AddItem(string, number)
    function GetText()
	function GetTextOf(number)
    function SetAutoDelete(boolean)
    function SetListLength(number)
    function CurrentID()
    function GetTextOf(number)
    function AttachChild(CUIWindow*)
    function Enable(boolean)
    function SetWndPos(vector2)
    function SetCurrentOptValue()
    function SetVertScroll(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function disable_id(number)
    function IsEnabled()
    function ResetPPMode()
    function SetCurrentID(number)
    function IsAutoDelete()
}

class CUICustomEdit : CUIWindow {
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function SetNextFocusCapturer(CUICustomEdit*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function CaptureFocus(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUICustomSpin : CUIWindow {
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIDialogWnd : CUIWindow {
    function HideDialog()
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function SetWndRect(Frect)
    function ShowDialog(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function GetHolder()
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIScriptWnd : CUIDialogWnd,DLL_Pure {
    CUIScriptWnd ()
	
    function HideDialog()
    function _construct()
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function OnKeyboard(number, enum EUIMessages)
    function Update()
    function AddCallback(string, number, const function<void>&, object)
    function SetAutoDelete(boolean)
    function Dispatch(number, number)
    function Show(boolean)
    function AttachChild(CUIWindow*)
    function Register(CUIWindow*, string)
    function SetWndPos(vector2)
    function ShowDialog(boolean)
    function Enable(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function GetHolder()
    function SetWndRect(Frect)
    function GetHeight() const
    function ResetPPMode()
    function GetWidth() const
    function IsEnabled()
    function SetWndSize(vector2)
    function Load(string)
    function IsAutoDelete()
}

class CUIEditBox : CUICustomEdit {
    CUIEditBox ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function SetNextFocusCapturer(CUICustomEdit*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function GetWidth() const
    function SetPPMode()
    function DetachChild(CUIWindow*)
    function CaptureFocus(boolean)
    function WindowName()
    function IsShown()
    function Enable(boolean)
    function SetWndRect(Frect)
    function GetHeight() const
    function ResetPPMode()
    function InitTexture(string)
    function IsEnabled()
    function SetWndSize(vector2)
    function Show(boolean)
    function IsAutoDelete()
}

class CUIEditBoxEx : CUICustomEdit {
    CUIEditBoxEx ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function SetNextFocusCapturer(CUICustomEdit*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function GetWidth() const
    function SetPPMode()
    function DetachChild(CUIWindow*)
    function CaptureFocus(boolean)
    function WindowName()
    function IsShown()
    function Enable(boolean)
    function SetWndRect(Frect)
    function GetHeight() const
    function ResetPPMode()
    function InitTexture(string)
    function IsEnabled()
    function SetWndSize(vector2)
    function Show(boolean)
    function IsAutoDelete()
}

class CUIFrameLineWnd : CUIWindow {
    CUIFrameLineWnd ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetHeight(number)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function SetColor(number)
    function GetWidth() const
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function SetWidth(number)
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIFrameWindow : CUIWindow {
    CUIFrameWindow ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetHeight(number)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function SetColor(number)
    function GetWidth() const
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function SetWidth(number)
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIGameCustom {
    function HidePdaMenu()
    function HideActorMenu()
    function AddDialogToRender(CUIWindow*)
    function RemoveDialogToRender(CUIWindow*)
    function show_messages()
    function GetCustomStatic(string)
    function AddCustomStatic(string, boolean)
    function hide_messages()
    function RemoveCustomStatic(string)
	function UpdateActorMenu
	function CurrentItemAtCell
	function update_fake_indicators
	function enable_fake_indicators
}

class CUILines {
    function GetText()
    function SetTextST(string)
    function SetTextColor(number)
    function SetText(string)
    function SetFont(CGameFont*)
    function SetElipsis(boolean)
}

class CUIListBox : CUIScrollView {
    CUIListBox ()
	
    function SetWindowName(string)
    function Enable(boolean)
    function RemoveWindow(CUIWindow*)
    function ScrollToBegin()
    function GetMinScrollPos()
    function AddExistingItem(CUIListBoxItem*)
    function AddWindow(CUIWindow*, boolean)
    function GetWidth() const
    function Clear()
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function IsShown()
    function Show(boolean)
    function GetHeight() const
    function IsEnabled()
    function ResetPPMode()
    function GetWndPos(CUIWindow*)
    function GetCurrentScrollPos()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function AddTextItem(string)
    function SetWndPos(vector2)
    function ScrollToEnd()
    function RemoveItem(CUIWindow*)
    function GetMaxScrollPos()
    function GetItemByIndex(number)
    function WindowName()
    function GetSelectedIndex()
	function SetSelectedIndex(number)
    function GetSelectedItem()
    function SetWndRect(Frect)
    function SetScrollPos(number)
    function GetSize()
    function RemoveAll()
    function ShowSelectedItem(boolean)
    function SetWndSize(vector2)
    function GetItem(number)
    function IsAutoDelete()
}

class CUIListBoxItem : CUIFrameLineWnd {
    CUIListBoxItem (number)
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetHeight(number)
    function AddIconField(number)
    function SetAutoDelete(boolean)
    function SetTextColor(number)
    function AddTextField(string, number)
    function AttachChild(CUIWindow*)
    function GetTextItem()
    function SetWndPos(vector2)
    function IsAutoDelete()
    function Enable(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function ResetPPMode()
    function SetWndRect(Frect)
    function GetHeight() const
    function SetWidth(number)
    function Show(boolean)
    function IsEnabled()
    function SetWndSize(vector2)
    function GetWidth() const
    function SetColor(number)
}

class CUIListBoxItemMsgChain : CUIListBoxItem {
    CUIListBoxItemMsgChain (number)
	
    function SetWindowName(string)
    function Enable(boolean)
    function SetHeight(number)
    function AddIconField(number)
    function SetAutoDelete(boolean)
    function SetTextColor(number)
    function SetColor(number)
    function AttachChild(CUIWindow*)
    function GetWidth() const
    function SetWndPos(vector2)
    function SetWndSize(vector2)
    function IsShown()
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function AddTextField(string, number)
    function Show(boolean)
    function SetWndRect(Frect)
    function GetTextItem()
    function SetWidth(number)
    function GetHeight() const
    function IsEnabled()
    function ResetPPMode()
    function GetWndPos(CUIWindow*)
    function IsAutoDelete()
}

class CUIMMShniaga : CUIWindow {
    const epi_main = 0
    const epi_new_game = 1
    const epi_new_network_game = 2
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function ShowPage(enum CUIMMShniaga::enum_page_id)
    function SetWndPos(vector2)
    function SetPage(enum CUIMMShniaga::enum_page_id, string, string)
    function SetVisibleMagnifier(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIMapInfo : CUIWindow {
    CUIMapInfo ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function InitMap(string, string)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function Init(vector2, vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIMapList : CUIWindow {
    CUIMapList ()
	
    function IsEmpty()
    function StartDedicatedServer()
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetModeSelector(CUISpinText*)
    function ClearList()
    function SetMapInfo(CUIMapInfo*)
    function OnModeChange()
    function LoadMapList()
    function SetAutoDelete(boolean)
    function GetCommandLine(string)
    function GetCurGameType()
    function SetWndRect(Frect)
    function AttachChild(CUIWindow*)
    function SaveMapList()
    function SetWndPos(vector2)
    function SetMapPic(CUIStatic*)
    function SetServerParams(string)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWeatherSelector(CUIComboBox*)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIMessageBox : CUIStatic {
    CUIMessageBox ()
	
    function InitMessageBox(string)
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function TextControl()
    function SetAutoDelete(boolean)
    function GetPassword()
    function GetHost()
    function SetStretchTexture(boolean)
    function AttachChild(CUIWindow*)
    function Enable(boolean)
    function SetTextureRect(Frect*)
    function ResetPPMode()
    function Show(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndPos(vector2)
    function SetWndRect(Frect)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
    function IsEnabled()
    function SetWndSize(vector2)
    function GetTextureRect()
    function IsAutoDelete()
}

class CUIMessageBoxEx : CUIDialogWnd {
    CUIMessageBoxEx ()
	
    function HideDialog()
    function InitMessageBox(string)
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function SetAutoDelete(boolean)
    function GetPassword()
    function AttachChild(CUIWindow*)
    function GetHost()
    function SetWndPos(vector2)
    function ShowDialog(boolean)
    function Enable(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function GetHolder()
    function SetWndRect(Frect)
    function GetHeight() const
    function ResetPPMode()
    function GetWidth() const
    function IsEnabled()
    function SetWndSize(vector2)
    function Show(boolean)
    function IsAutoDelete()
}

class COptionsManager {
    COptionsManager ()
	
    function SendMessage2Group(string, string)
    function UndoGroup(string)
    function SaveBackupValues(string)
    function IsGroupChanged(string)
    function SaveValues(string)
    function SetCurrentValues(string)
    function NeedSystemRestart()
    function OptionsPostAccept()
}

class CUIProgressBar : CUIWindow {
    CUIProgressBar ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function GetRange_max()
    function SetAutoDelete(boolean)
    function GetRange_min()
    function SetProgressPos(number)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function GetProgressPos()
	function ShowBackground(boolean)
	function SetColor(number)
	function UseColor(boolean)
	function SetMinColor(number)
	function SetMiddleColor(number)
	function SetMaxColor(number)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIPropertiesBox : CUIFrameWindow {
    CUIPropertiesBox ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetHeight(number)
    function AddItem(string)
    function SetAutoDelete(boolean)
    function AutoUpdateSize()
    function RemoveItem(number)
    function RemoveAll()
    function AttachChild(CUIWindow*)
    function Hide()
    function SetWndPos(vector2)
    function IsAutoDelete()
    function Enable(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function ResetPPMode()
    function SetWndRect(Frect)
    function GetHeight() const
    function SetWidth(number)
    function Show(boolean)
    function Show(number, number)
    function IsEnabled()
    function SetWndSize(vector2)
    function GetWidth() const
    function SetColor(number)
}

class CUIScrollView : CUIWindow {
    CUIScrollView ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetScrollPos(number)
    function RemoveWindow(CUIWindow*)
    function ScrollToBegin()
	function SetFixedScrollBar(boolean)
    function SetAutoDelete(boolean)
    function GetCurrentScrollPos()
    function AddWindow(CUIWindow*, boolean)
    function GetMaxScrollPos()
    function AttachChild(CUIWindow*)
    function GetMinScrollPos()
    function SetWndPos(vector2)
    function ScrollToEnd()
    function Clear()
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUISleepStatic : CUIStatic {
    CUISleepStatic ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function TextControl()
    function SetAutoDelete(boolean)
    function SetStretchTexture(boolean)
    function AttachChild(CUIWindow*)
    function Enable(boolean)
    function SetTextureRect(Frect*)
    function ResetPPMode()
    function Show(boolean)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndPos(vector2)
    function SetWndRect(Frect)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
    function IsEnabled()
    function SetWndSize(vector2)
    function GetTextureRect()
    function IsAutoDelete()
}

class CUISpinFlt : CUICustomSpin {
    CUISpinFlt ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function GetWidth() const
    function SetWndRect(Frect)
    function GetHeight() const
    function Enable(boolean)
    function ResetPPMode()
    function IsEnabled()
    function SetWndSize(vector2)
    function Show(boolean)
    function IsAutoDelete()
}

class CUISpinNum : CUICustomSpin {
    CUISpinNum ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function GetWidth() const
    function SetWndRect(Frect)
    function GetHeight() const
    function Enable(boolean)
    function ResetPPMode()
    function IsEnabled()
    function SetWndSize(vector2)
    function Show(boolean)
    function IsAutoDelete()
}

class CUISpinText : CUICustomSpin {
    CUISpinText ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function GetText()
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function GetWidth() const
    function SetWndRect(Frect)
    function GetHeight() const
    function Enable(boolean)
    function ResetPPMode()
    function IsEnabled()
    function SetWndSize(vector2)
    function Show(boolean)
    function IsAutoDelete()
}

class CUIStatic : CUIWindow {
    CUIStatic ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function TextControl()
    function SetAutoDelete(boolean)
    function GetTextureRect()
    function AttachChild(CUIWindow*)
    function SetStretchTexture(boolean)
    function SetWndPos(vector2)
    function SetTextureRect(Frect*)
    function SetWndSize(vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
	function GetTextureColor()
	function SetTextureColor(number)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
	-- Tronex: rotation
	function EnableHeading(boolean)
	function GetHeading()
	function SetHeading(number)
	function GetConstHeading()
	function SetConstHeading(boolean)
	
}

class CUITabButton : CUIButton {
    CUITabButton ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function TextControl()
    function SetAutoDelete(boolean)
    function Enable(boolean)
    function AttachChild(CUIWindow*)
    function GetTextureRect()
    function SetWndPos(vector2)
    function SetWndSize(vector2)
    function SetWndRect(Frect)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetTextureRect(Frect*)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function InitTexture(string)
    function IsEnabled()
    function ResetPPMode()
    function SetStretchTexture(boolean)
    function IsAutoDelete()
}

class CUITabControl : CUIWindow {
    CUITabControl ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetAutoDelete(boolean)
    function GetActiveId()
    function SetActiveTab(string)
    function GetTabsCount() const
    function AttachChild(CUIWindow*)
    function GetButtonById(string)
    function SetWndPos(vector2)
    function RemoveAll()
    function AddItem(CUITabButton*)
    function AddItem(string, string, vector2, vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUITextWnd : CUIWindow {
    CUITextWnd ()
	
    function SetWndRect(Frect)
    function GetFont()
    function SetTextOffset(number, number)
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetText(string)
    function SetWndSize(vector2)
    function SetTextAlignment(enum CGameFont::EAligment)
    function SetTextComplexMode(boolean)
    function GetText()
    function SetAutoDelete(boolean)
    function GetTextColor()
    function SetTextColor(number)
    function SetFont(CGameFont*)
    function AttachChild(CUIWindow*)
    function SetTextST(string)
    function SetWndPos(vector2)
    function AdjustHeightToText()
    function AdjustWidthToText()
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetEllipsis(boolean)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetVTextAlignment(enum EVTextAlignment)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUITrackBar : CUIWindow {
    CUITrackBar ()
	
    function SetWindowName(string)
    function GetWndPos(CUIWindow*)
    function SetAutoDelete(boolean)
    function SetCheck(boolean)
    function AttachChild(CUIWindow*)
    function SetCurrentValue()
    function SetWndPos(vector2)
    function GetCheck()
	function GetFValue()
    function GetIValue()
	function SetFValue(number)
    function SetIValue(number)
	function SetStep(number)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function SetWndRect(Frect)
    function Show(boolean)
    function GetHeight() const
    function GetWidth() const
    function SetWndSize(vector2)
    function IsEnabled()
    function ResetPPMode()
    function Enable(boolean)
    function IsAutoDelete()
}

class CUIWindow {
    CUIWindow ()
	
    function SetWindowName(string)
    function Enable(boolean)
    function SetAutoDelete(boolean)
    function AttachChild(CUIWindow*)
    function SetWndPos(vector2)
    function DetachChild(CUIWindow*)
    function SetPPMode()
    function WindowName()
    function IsShown()
    function ResetPPMode()
    function SetWndRect(Frect)
    function GetHeight() const
    function Show(boolean)
    function GetWndPos(CUIWindow*)
    function IsEnabled()
    function SetWndSize(vector2)
    function GetWidth() const
    function IsAutoDelete()
}

class GameGraph__CVertex {
    function level_vertex_id() const
    function game_point(const GameGraph__CVertex*)
    function level_id() const
    function level_point(const GameGraph__CVertex*)
}

class CZombie : CGameObject {
    CZombie ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class CZoneCampfire : CGameObject {
    CZoneCampfire ()
	
    function Visual() const
    function getEnabled() const
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function is_on()
    function turn_on()
    function turn_off()
    function net_Export(net_packet&)
    function _construct()
    function use(CGameObject*)
}

class CZudaArtefact : CArtefact {
    CZudaArtefact ()
	
    function Visual() const
    function _construct()
    function net_Import(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function SwitchVisibility(boolean)
    function FollowByPath(string, number, vector)
    function getEnabled() const
    function net_Export(net_packet&)
    function GetAfRank() const
    function use(CGameObject*)
}

class ClientID {
    ClientID ()
	
	operator ==(ClientID&, ClientID)
	
    function value() const
    function set(number)
}

class FS_file_list {
    function Free()
    function GetAt(number)
    function Size()
}

class FS_file_list_ex {
    function Sort(number)
    function GetAt(number)
    function Size()
}

class FactionState {
    property actor_goodwill
    property bonus
    property faction_id
    property icon
    property icon_big
    property location
    property member_count
    property name
    property power
    property resource
    property target
    property target_desc
    property war_state1
    property war_state2
    property war_state3
    property war_state4
    property war_state5
    property war_state_hint1
    property war_state_hint2
    property war_state_hint3
    property war_state_hint4
    property war_state_hint5
}

class IKinematicsAnimated {
    function PlayCycle(IKinematicsAnimated*, string)
}

class ipure_schedulable_object

class ipure_server_object : ipure_alife_load_save_object

class reader {
    function r_advance(number)
    function r_u64(unsigned __int64&)
    function r_u64()
    function r_bool(reader*)
    function r_dir(vector&)
    function r_u8(number&)
    function r_u8()
    function r_eof(reader*)
    function r_float_q8(number, number)
    function r_vec3(reader*, vector*)
    function r_stringZ(reader*)
    function r_u16(number&)
    function r_u16()
    function r_float_q16(number, number)
    function r_angle16()
    function r_s64(__int64&)
    function r_s64()
    function r_float(number&)
    function r_float()
    function r_s32(number&)
    function r_s32()
    function r_elapsed() const
    function r_sdir(vector&)
    function r_tell() const
    function r_s8(signed char&)
    function r_s8()
    function r_s16(number&)
    function r_s16()
    function r_seek(number)
    function r_u32(number&)
    function r_u32()
    function r_angle8()
}

class IRender_Visual {
    function dcast_PKinematicsAnimated()
}

class net_packet {
    net_packet ()
    function r_advance(number)
    function r_begin(number&)
    function w_chunk_open16(number&)
    function r_u32(number&)
    function r_u32()
    function w_begin(number)
    function w_u32(number)
    function r_u8(number&)
    function r_u8()
    function r_eof(net_packet*)
    function w_chunk_open8(number&)
    function r_vec3(vector&)
    function w_u8(number)
    function r_u16(number&)
    function r_u16()
    function r_float_q16(number&, number, number)
    function r_angle16(number&)
    function r_s64(__int64&)
    function r_s64()
    function w_angle16(number)
    function r_tell()
    function r_s16(number&)
    function r_s16()
    function w_clientID(ClientID&)
    function r_elapsed()
    function r_u64(unsigned __int64&)
    function r_u64()
    function w_sdir(const vector&)
    function r_clientID(net_packet*)
    function r_dir(vector&)
    function r_matrix(matrix&)
    function r_stringZ(net_packet*)
    function w_s16(number)
    function r_sdir(vector&)
    function w_matrix(matrix&)
    function w_u16(number)
    function r_float_q8(number&, number, number)
    function w_s64(__int64)
    function r_bool(net_packet*)
    function w_bool(net_packet*, boolean)
    function w_dir(const vector&)
    function w_s32(number)
    function w_stringZ(string)
    function w_float_q16(number, number, number)
    function r_s8(signed char&)
    function r_s8()
    function w_chunk_close8(number)
    function r_float(number&)
    function r_float()
    function w_angle8(number)
    function r_s32(number&)
    function r_s32()
    function w_float(number)
    function w_tell()
    function r_seek(number)
    function w_float_q8(number, number, number)
    function w_vec3(const vector&)
    function w_chunk_close16(number)
    function w_u64(unsigned __int64)
    function r_angle8(number&)
}

class SServerFilters {
    property empty
    property full
    property listen_servers
    property with_pass
    property without_ff
    property without_pass
    SServerFilters ()
}

class account_manager {
    function get_account_profiles(string, string, account_profiles_cb)
    function create_profile(string, string, string, string, account_operation_cb)
    function get_suggested_unicks() const
    function stop_suggest_unique_nicks()
    function verify_password(string)
    function verify_unique_nick(string)
    function stop_searching_email()
    function verify_email(string)
    function search_for_email(string, found_email_cb)
    function suggest_unique_nicks(string, suggest_nicks_cb)
    function get_verify_error_descr() const
    function delete_profile(account_operation_cb)
    function stop_fetching_account_profiles()
    function get_found_profiles() const
}

class physics_element {
    function get_density()
    function get_mass()
    function is_fixed()
    function is_breakable()
    function get_volume()
    function get_linear_vel(vector&) const
    function fix()
    function get_angular_vel(vector&) const
    function apply_force(number, number, number)
    function release_fixed()
    function global_transform(physics_element*)
}

class physics_joint {
    function set_limits(number, number, number)
    function get_axis_angle(number)
    function get_anchor(vector&)
    function get_axis_dir(number, vector&)
    function get_bone_id()
    function is_breakable()
    function set_max_force_and_velocity(number, number, number)
    function set_axis_dir_global(number, number, number, number)
    function get_first_element()
    function set_axis_dir_vs_second_element(number, number, number, number)
    function get_axes_number()
    function set_joint_spring_dumping_factors(number, number)
    function set_axis_spring_dumping_factors(number, number, number)
    function set_anchor_vs_first_element(number, number, number)
    function get_stcond_element()
    function set_anchor_global(number, number, number)
    function get_limits(number&, number&, number)
    function set_anchor_vs_second_element(number, number, number)
    function set_axis_dir_vs_first_element(number, number, number, number)
    function get_max_force_and_velocity(number&, number&, number)
}

class physics_shell {
    function get_joints_number()
    function is_breaking_blocked()
    function get_element_by_bone_id(number)
    function get_linear_vel(vector&) const
    function is_breakable()
    function get_elements_number()
    function unblock_breaking()
    function get_joint_by_bone_name(string)
    function get_element_by_order(number)
    function get_element_by_bone_name(string)
    function apply_force(number, number, number)
    function get_angular_vel(vector&) const
    function block_breaking()
    function get_joint_by_order(number)
    function get_joint_by_bone_id(number)
}

class physics_world {
    function set_gravity(number)
    function gravity()
    function add_call(class CPHCondition*, class CPHAction*)
}

class demo_info {
    function get_map_name() const
    function get_player(number) const
    function get_game_type() const
    function get_players_count() const
    function get_map_version() const
    function get_author_name() const
    function get_game_score() const
}

class demo_player_info {
    function get_spots() const
    function get_name() const
    function get_rank() const
    function get_artefacts() const
    function get_team() const
    function get_deaths() const
    function get_frags() const
}

class login_manager {
    function save_nick_to_registry(string)
    function forgot_password(string)
    function get_nick_from_registry()
    function get_current_profile() const
    function get_remember_me_from_registry()
    function stop_login()
    function save_password_to_registry(string)
    function login_offline(string, login_operation_cb)
    function save_remember_me_to_registry(boolean)
    function set_unique_nick(string, login_operation_cb)
    function login(string, string, string, login_operation_cb)
    function get_email_from_registry()
    function logout()
    function get_password_from_registry()
    function save_email_to_registry(string)
    function stop_setting_unique_nick()
}

class smart_cover_object : CGameObject {
    smart_cover_object ()
	
    function Visual() const
    function _construct()
    function getEnabled() const
    function net_Import(net_packet&)
    function net_Export(net_packet&)
    function getVisible() const
    function net_Spawn(cse_abstract*)
    function use(CGameObject*)
}

class profile_store {
    const at_award_massacre = 0
    const at_awards_count = 30
    const bst_backstabs_in_row = 2
    const bst_bleed_kills_in_row = 2
    const bst_explosive_kills_in_row = 3
    const bst_eye_kills_in_row = 4
    const bst_head_shots_in_row = 3
    const bst_kills_in_row = 0
    const bst_kinife_kills_in_row = 1
    const bst_score_types_count = 7
	
    function get_best_scores()
    function get_awards()
    function stop_loading()
    function load_current_profile(store_operation_cb, store_operation_cb)
}

class CTime {
    const DateToDay = 0
    const DateToMonth = 1
    const DateToYear = 2
    const TimeToHours = 0
    const TimeToMilisecs = 3
    const TimeToMinutes = 1
    const TimeToSeconds = 2
	
    CTime ()
    CTime (const CTime&)
	
	operator ==(const CTime&, CTime)
	operator <(const CTime&, CTime)
    operator +(CTime&, CTime)
    operator >=(const CTime&, CTime)
    operator >(const CTime&, CTime)
    operator -(CTime&, CTime)
    operator <=(const CTime&, CTime)
	
    function sub(CTime*)
    function timeToString(number)
    function dateToString(number)
    function get(number&, number&, number&, number&, number&, number&, number&)
    function set(number, number, number, number, number, number, number)
    function setHMSms(number, number, number, number)
    function diffSec(CTime*)
    function setHMS(number, number, number)
    function add(CTime*)
}
